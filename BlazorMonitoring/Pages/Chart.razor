@page "/ChartHistory"
@using FM4017Library.DataAccess
@using BlazorMonitoring.Pages.Components
@using FM4017Library.Dtos

@inject IDataAccess _d4DataService



<div style="background-color:white; text-align:center; border-radius: 30px; padding: 30px">

    <h3>Historical Data</h3>
    <hr class="border border-primary border-3 opacity-25">

    <HistoricalSignalChart SignalNodes="SignalNodes"></HistoricalSignalChart>

    @*Select Data*@
    <br />
    <hr class="border border-primary border-3 opacity-25">
    <h5>Select Data</h5>

    <label>Point:</label>
    <SfDropDownList TValue="string" TItem="PointNode" @bind-Value="SelectedPointId" DataSource="@points" Placeholder="Select a point">
        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
    </SfDropDownList>


    <label class="col-md-3">Start Date:</label>
    <div class="col-auto">
        <SfDatePicker TValue="DateTime?" @bind-Value="@StartDate" ></SfDatePicker>
    </div>

    <label class="col-md-3">Duration:</label>
    <SfDropDownList TValue="int" TItem="Duration" @bind-Value="SelectedDuration" DataSource="@LocalData">
        <DropDownListFieldSettings Value="Days" Text="Text"></DropDownListFieldSettings>
    </SfDropDownList>

       
    <br />
    <br />
    <button class="btn btn-primary" @onclick="(() => GetSignals(SelectedPointId, StartDate, SelectedDuration) )">Update Chart</button>

    @if (GettingSignals)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <p><small> (Signals: @SignalNodes.Count())</small></p>
    }
    

</div>

@code {
    public string SelectedPointId { get; set; } = "63230f2eeac7b9f938eb29b1";

    public DateTime? StartDate { get; set; } = DateTime.Now.AddDays(-1);
    private int SelectedDuration { get; set; } = 1;

    public List<PointNode> points = new();


    public class Duration
    {
        public int Days { get; set; }
        public string? Text { get; set; }
    }

    public List<Duration> LocalData = new() {
        new Duration() { Days = 1, Text = "1 day"},
        new Duration() { Days = 2, Text = "2 days"},
        new Duration() { Days = 3, Text = "3 days"},
        new Duration() { Days = 7, Text = "1 week"},
    };

    protected override async Task OnInitializedAsync()
    {
        points = await PointNodesWithSignals();
        StateHasChanged();
    }
}
