@using FM4017Library.Dtos
@using FM4017Library.Helpers


@*<div class="alert" style="background-color:#eef1ff; text-align:center; border-radius: 30px">*@
<div class="alert" style="background-color:white; text-align:center; border-radius: 30px">

    @*Image*@
    @*<a target="_blank" href="@ImageUrl"><img src=@ImageUrl style="height:80px"></a>*@
    <a target="_blank" href="@ImageUrl"><img src=@ImageUrl class="img-fluid"></a>
    
    @*Name*@
    <h5 class="py-2">@Prettify.Name(Name)</h5>

    @*Value unit*@
    @if (LastUniqueSignals != null)
        {
            @foreach (var signal in LastUniqueSignals)
            {
                <h2>@signal.Data?.RawValue @Prettify.Unit(signal.Unit)</h2>
            }
        }
    
    @*Last updated*@
    Updated: @Updated <br />

    @*line*@
    @*<hr size="10" style="color:#1b1a5a;">*@
    <hr class="border border-primary border-3 opacity-25">

    @*Lat Long*@
    Longitude: @Longitude Lattitude: @Latitude
    <br />
    @if (Latitude != null && Longitude != null)
    {
        <a target="_blank" href="https://www.google.com/maps/dir/?api=1&travelmode=driving&destination=@Longitude,@Latitude "><span class="oi oi-location">Show on map</span></a>
    }
    

</div>


@code {
    [Parameter]
    public PointNode? MyPoint { get; set; }

    private string? Latitude
    {
        get { return MyPoint?.Metadata?.Latitude?.ToString("0.###"); }
    }

    private string? Longitude
    {
        get { return MyPoint?.Metadata?.Longitude?.ToString("0.###"); }
    }

    private string? Updated
    {
        get 
        {
            var localTime = DateTimeHelpers.UtcTime2Local(MyPoint?.Signals?.SignalNodes?.LastOrDefault()?.Timestamp);
            var formattedTime = DateTimeHelpers.DateTimePrintFormatter(localTime);
            return formattedTime;
        }
    }

    private string? ImageUrl
    {
        get { return MyPoint?.Metadata?.ImageUrl; }
    }

    private string? Name
    {
        get { return MyPoint?.Name; }
    }

    private string? Unit
    {
        get { return MyPoint?.Signals?.SignalNodes?.LastOrDefault()?.Unit; }
    }

    private List<SignalNode>? LastUniqueSignals
    {
        get {
            List<SignalNode>? result = new();

            // find # unique
            List<SignalNode>? uniqueUnitSignals = MyPoint?.Signals?.SignalNodes?.DistinctBy(t => t.Unit).ToList();

            if (uniqueUnitSignals != null)
            {
                // get last (newest) signalnode of each unique unit
                foreach (var u in uniqueUnitSignals)
                {
                    var a = MyPoint?.Signals?.SignalNodes?.FindLast(t => t.Unit == u.Unit);

                    // add to result if not null
                    if (a != null)
                    {
                        result.Add(a);
                    }
                }
            }

            return result; 
        }
    }

    //private string? PrettifyUnits(string? unit)
    //{
    //    if (unit == "CELSIUS_DEGREES")
    //    {
    //        return "°C";
    //    }
    //    else if (unit == "PERCENTS")
    //    {
    //        return "% RH";
    //    }

    //    return unit;
    //}

    //private string? PrettifyName(string? name)
    //{
    //    return name?.Replace("_", " ");
    //}




}

