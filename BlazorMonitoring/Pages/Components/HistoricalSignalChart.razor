@using FM4017Library.Dtos
@using FM4017Library.Helpers


<SfChart @ref="ChartObj" Title="Selected Point" Palettes="@palettes" Height="100%">
    <ChartPrimaryXAxis Format="dd:MM:yy HH:mm" ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" /> @*Title="TimeStamp"*@
    @*<ChartPrimaryYAxis Title="Value" />*@
    <ChartZoomSettings EnableMouseWheelZooming="true" EnablePinchZooming="true" EnableSelectionZooming="true"></ChartZoomSettings>
    <ChartTooltipSettings Enable="true" />
    <ChartLegendSettings Visible="true" Position="LegendPosition.Top" />
    <ChartSeriesCollection>
        @foreach (var signalsList in UniqueSignalsLists)
        {
            <ChartSeries
                DataSource="@signalsList"
                Name="@(Prettify.Unit(signalsList?.FirstOrDefault()?.Unit))" 
                XName="TimeStamp" 
                YName="Value" 
                Type="ChartSeriesType.Line">
            </ChartSeries>
        }
    </ChartSeriesCollection>
</SfChart>

<button class="btn btn-primary" @onclick="Export">Export Chart</button>

<div id="wrapper">
    <SfDatePicker TValue="DateTime?" Placeholder='Choose a Date'></SfDatePicker>
</div>

@code {
    // Change default color of series in chart
    public String[] palettes = new String[] { "#0b5ed7", "#5c636a", "#79ddd5" };

    // Lazy loading https://blazor.syncfusion.com/documentation/chart/how-to/lazy-loading


    
    SfChart ChartObj;
    private async Task Export(MouseEventArgs args)
    {
        // Print save as pdf buttons? https://blazor.syncfusion.com/documentation/chart/chart-print
        await ChartObj.ExportAsync(ExportType.PNG, "pngImage");
        //await ChartObj.PrintAsync();
    }


    [Parameter]
    public List<SignalNode>? SignalNodes { get; set; }

    


    // Split the Signal
    private List<List<Signal>> UniqueSignalsLists
    {
        get
        {
            List<List<Signal>> result = new ();

            // If channel is not null filter out channel 1 (changed by dataloggin group 27.10.22)
            if (SignalNodes?.LastOrDefault()?.Metadata?.Channel is not null)
            {
                List<Signal> channelResult = new();

                foreach (var signal in SignalNodes!.Where(t => t.Metadata.Channel == "1"))
                {
                    if (signal?.Timestamp is not null)
                    {
                        channelResult.Add(new Signal
                            {
                                TimeStamp = DateTimeHelpers.UtcTime2Local(signal.Timestamp.Value),
                                Value = Convert.ToDouble(signal?.Data?.RawValue),
                                Unit = signal?.Unit
                            });
                    }
                }
                result.Add(channelResult);
                return result;
            }

            // Create a list of signals with each unique unit
            List<string?> uniqueUnits = SignalNodeHelpers.ListAndOrderUniqueUnits(SignalNodes);

            if (uniqueUnits is not null)
            {
                foreach (var uniqeUnit in uniqueUnits)
                {
                    // holds result per unit
                    List<Signal> unitResult = new();

                    foreach (var signal in SignalNodes!.Where(t => t.Unit == uniqeUnit))
                    {
                        if (signal?.Timestamp is not null)
                        {
                            unitResult.Add(new Signal
                                {
                                    TimeStamp = DateTimeHelpers.UtcTime2Local(signal.Timestamp.Value),
                                    Value = Convert.ToDouble(signal?.Data?.RawValue),
                                    Unit = signal?.Unit
                        });
                        }
                    }

                    result.Add(unitResult);
                }

            }

            return result;
        }
    }

    // helper class used to pass data to the chart
    private class Signal
    {
        public DateTime? TimeStamp { get; set; }
        public double Value { get; set; }
        public string? Unit { get; set; }
    }
}
