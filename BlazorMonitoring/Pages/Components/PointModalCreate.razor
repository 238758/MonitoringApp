@using FM4017Library.DataAccess
@using FM4017Library.Dtos
@inject IDataAccess d4DataService
@inject DataAccessService dataAccess


<button type="button" class="btn btn-warning" @onclick="(() => ShowPopup = true)">
    Create Point here
</button>

@if (_showPopup)
{
    <!-- Modal -->
    <div class="modal" tabindex="-1" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    @if (string.IsNullOrEmpty(ParentSpace?.Name))
                    {
                        <h5 class="modal-title">Create Point with no parent space</h5>
                    }
                    else
                    {
                        <h5 class="modal-title">Create Point with parent: @ParentSpace?.Name</h5>
                    }
                    
                    <button type="button" class="btn-close" data-bs-dismiss="modal" @onclick="(() => _showPopup = false)"></button>
                </div>
                @*<div class="modal-body">*@


                <EditForm Model="_model" OnValidSubmit="ExecuteCreate" class="card card-body bg-light">
                    <DataAnnotationsValidator />

                    <div class="form-group row">
                        <label for="name" class="col-md-3 col-form-label">Name:</label>
                        <div class="col-md-9">
                            <InputText id="Name" class="form-control" @bind-Value="_model.Name" />
                            <ValidationMessage For="@(() => _model.Name)" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="latitude" class="col-md-3 col-form-label">Latitude:</label>
                        <div class="col-md-9">
                            <InputText id="Latitude" class="form-control" @bind-Value="_model.Latitude" />
                            <ValidationMessage For="@(() => _model.Latitude)" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="longitude" class="col-md-3 col-form-label">Longitude:</label>
                        <div class="col-md-9">
                            <InputText id="Longitude" class="form-control" @bind-Value="_model.Longitude" />
                            <ValidationMessage For="@(() => _model.Longitude)" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="imageUrl" class="col-md-3 col-form-label">Image Url:</label>
                        <div class="col-md-9">
                            <InputText id="IamgeUrl" class="form-control" @bind-Value="_model.ImageUrl" />
                            <ValidationMessage For="@(() => _model.ImageUrl)" />
                        </div>
                    </div>



                    <div class="row">
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="(() => _showPopup = false)">Close</button>
                            <button type="submit" class="btn btn-primary">Create Point</button>
                        </div>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>
}





@code {
    // Input to component
    [Parameter]
    public SpaceNode? ParentSpace { get; set; }


    public bool ShowPopup
    {
        get
        {
            return _showPopup;
        }
        set
        {
            _showPopup = value;
        }
    }

    CreateUpdateSpacePointModel _model = new();
    bool _showPopup = false;


    private async Task ExecuteCreate()
    {
        ShowPopup = false;

        double latitude, longitude;
        double.TryParse(_model.Latitude, out latitude);
        double.TryParse(_model.Longitude, out longitude);

        await d4DataService.CreatePoint(_model!.Name!, ParentSpace?.Id, latitude, longitude, _model.ImageUrl);

        dataAccess.GetAllSpacesPointsSignalsAsync();
        // Give D4 some time to update
        Thread.Sleep(1200);
        dataAccess.GetAllSpacesPointsSignalsAsync();
    }
}
