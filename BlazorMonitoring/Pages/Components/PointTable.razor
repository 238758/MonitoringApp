@using FM4017Library.Dtos
@using FM4017Library.Helpers

<div class="alert" style="background-color:white; text-align:center; border-radius: 30px">

Selected Point: @SelectedPoint?.Name @*(id: @SelectedPoint?.Id)*@
<h5>Points in selected Space </h5>

<table class="table table-striped table-light table-hover">
    <thead class="table-dark">
        <tr>
            <th>Name</th>
            <th>Id</th>
            <th>Created At</th>
            <th>Updated At</th>
            <th>Last Value</th>
            <th>Last Unit</th>
            <th>Signal Strength</th>
            <th>SNR</th>
            <th>Latitude</th>
            <th>Longitude</th>
            <th>DevEUI</th>
            <th>Signals</th>
            <th>Image</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        @if (Points is not null)
        {
            @foreach (var point in Points)
            {
                <tr >
                    <td @onclick="() => ChangeSelectedPoint(point!)">@point.Name</td>
                    <td @onclick="() => ChangeSelectedPoint(point!)">@point.Id</td>
                    <td @onclick="() => ChangeSelectedPoint(point!)">@DateTimeHelpers.DateTimePrintFormatter(DateTimeHelpers.UtcTime2Local(point.CreatedAt))</td>
                    <td @onclick="() => ChangeSelectedPoint(point!)">@DateTimeHelpers.DateTimePrintFormatter(DateTimeHelpers.UtcTime2Local(point.UpdatedAt))</td>
                    <td @onclick="() => ChangeSelectedPoint(point!)">@point?.Signals?.SignalNodes?.LastOrDefault()?.Data?.RawValue</td>
                    <td @onclick="() => ChangeSelectedPoint(point!)">@Prettify.Unit(point?.Signals?.SignalNodes?.LastOrDefault()?.Unit) </td>
                    <td @onclick="() => ChangeSelectedPoint(point!)">@point?.Signals?.SignalNodes?.LastOrDefault()?.Metadata?.SignalStrength </td>
                    <td @onclick="() => ChangeSelectedPoint(point!)">@point?.Signals?.SignalNodes?.LastOrDefault()?.Metadata?.Snr </td>
                    <td @onclick="() => ChangeSelectedPoint(point!)">@point?.Metadata?.Latitude?.ToString("0.###")</td>
                    <td @onclick="() => ChangeSelectedPoint(point!)">@point?.Metadata?.Longitude?.ToString("0.###")</td>
                    <td @onclick="() => ChangeSelectedPoint(point!)">@point?.Metadata?.DevEui</td>
                    <td @onclick="() => ChangeSelectedPoint(point!)">@point?.Signals?.SignalNodes?.Count</td>
                    <td>
                            @if (!string.IsNullOrEmpty(@point?.Metadata?.ImageUrl))
                    {
                                <a target="_blank" href="@point.Metadata.ImageUrl">Show</a>
                    }
                    </td>
                    <td><PointModalEdit Point="point" /></td>
                    <td><PointModalDelete Point="point" /></td>
                </tr>
            }
        }
    </tbody>
</table>

 @if (SelectedPoint is not null)
{
    <SignalModalCreate ParentPoint="SelectedPoint"></SignalModalCreate>  
}
    &nbsp;
  @*disabled simulator*@
@if (false)
{
    <SignalModalSimulator ParentPoint="SelectedPoint"></SignalModalSimulator>
}

<br />
<br />
</div>
<SignalTable
    Signals="Points?.Find(s => s.Id == SelectedPoint?.Id)?.Signals?.SignalNodes" 
    @bind-SelectedSignal="BoundValue" />

    

@code {
    [Parameter]
    public List<PointNode>? Points { get; set; }

    [Parameter]
    public PointNode? SelectedPoint { get; set; }

    [Parameter]
    public EventCallback<PointNode> SelectedPointChanged { get; set; }

    private async Task ChangeSelectedPoint(PointNode point)
    {
        await SelectedPointChanged.InvokeAsync(point);
    }

    // chain bind from child
    [Parameter]
    public SignalNode? ChildSelectedSignal { get; set; }

    [Parameter]
    public EventCallback<SignalNode> ChildSelectedSignalChanged { get; set; }

    private SignalNode? BoundValue
    {
        get => ChildSelectedSignal;
        set => ChildSelectedSignalChanged.InvokeAsync(value);
    }

    private async Task ChangeSelectedSignal(SignalNode signal)
    {
        await ChildSelectedSignalChanged.InvokeAsync(ChildSelectedSignal);
    }

}
