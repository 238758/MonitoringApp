@using FM4017Library.Dtos
@using FM4017Library.Helpers

@foreach (var signalNodes in signalNodesList)
    {
<div style="background-color:#eef1ff; border-radius: 30px; margin: 20px 0 0 0; padding: 10px">

    <div style="background-color:white; border-radius:30px; padding: 5px 10px 5px 10px">
        
        @if (signalNodes?.FirstOrDefault()?.Unit == "GENERIC")
        {
                <div>
                    <h5>
                        Stats for @Prettify.Unit(signalNodes?.FirstOrDefault()?.Unit).parameter
                        last @(TotalHours(signalNodes?.LastOrDefault()?.Timestamp, signalNodes?.FirstOrDefault()?.Timestamp)) hours
                    </h5>

                    Open: @CalcOpenPercentage(SignalNodes).ToString("0.#") % of the time<br>
                    


                </div>
            }
        else
        {
                <div>
                    <h5>
                        Stats for @Prettify.ParameterUnit(signalNodes?.FirstOrDefault()?.Unit)
                        last @(TotalHours(signalNodes?.LastOrDefault()?.Timestamp, signalNodes?.FirstOrDefault()?.Timestamp)) hours
                    </h5>

                    Max: @signalNodes?.Max(x => x?.Data?.NumericValue)

                    Min: @signalNodes?.Min(x => x?.Data?.NumericValue)

                    Avg: @signalNodes?.Average(x => x?.Data?.NumericValue)?.ToString("0.0")
                </div>
        }
        



    </div>


    

</div>
}
@code {
    [Parameter]
    public List<SignalNode>? SignalNodes { get; set; }

    private List<List<SignalNode>> signalNodesList 
    {
        get
        {
            return SignalNodeHelpers.SplitListToListsWithUniqueChannelOrUniqueUnit(SignalNodes);
        }
    }

    private string? TotalHours(DateTime? last, DateTime? first)
    {

        TimeSpan? ts = last - first;

        return ts?.TotalHours.ToString("#"); 
    }

}
