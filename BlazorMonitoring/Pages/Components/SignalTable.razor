@using FM4017Library.Dtos
@using FM4017Library.Helpers

<h5>Signals in selected Point</h5>

<table class="table table-striped table-light table-hover">
    <thead class="table-dark">
        <tr>
            <th>Id</th>
            <th>Timestamp</th>
            <th>Unit</th>
            <th>Value</th>
            <th>Created At</th>
            <th>Updated At</th>
            <th>Signal Strength</th>
            <th>SNR</th>
        </tr>
    </thead>
    <tbody>
        @if (Signals != null)
        {
            @foreach (var signal in Signals.Reverse<SignalNode>() )
            {
                <tr @onclick="() => ChangeSelectedSignal(signal)">
                    <td>@signal.Id</td>
                    <td>@DateTimeHelpers.DateTimePrintFormatter(DateTimeHelpers.UtcTime2Local(signal.Timestamp))</td>
                    <td>@Prettify.Unit(signal.Unit)</td>
                    <td>@signal.Data?.RawValue</td>
                    <td>@DateTimeHelpers.DateTimePrintFormatter(DateTimeHelpers.UtcTime2Local(signal.CreatedAt))</td>
                    <td>@DateTimeHelpers.DateTimePrintFormatter(DateTimeHelpers.UtcTime2Local(signal.UpdatedAt))</td>
                    <td>@signal.Metadata?.SignalStrength</td>
                    <td>@signal.Metadata?.Snr</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public List<SignalNode>? Signals { get; set; }

    [Parameter]
    public SignalNode? SelectedSignal { get; set; }
    
    [Parameter]
    public EventCallback<SignalNode> SelectedSignalChanged { get; set; }

    private async Task ChangeSelectedSignal(SignalNode signal)
    {
        await SelectedSignalChanged.InvokeAsync(signal);
    }
}
