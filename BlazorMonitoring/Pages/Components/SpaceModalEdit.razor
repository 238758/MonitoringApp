@using FM4017Library.DataAccess
@using FM4017Library.Dtos
@inject IDataAccess d4DataService
@inject DataAccessService dataAccess

<button type="button" class="btn btn-warning" @onclick="ShowPopup">
    Edit
</button>

@if (showPopup)
{
    <!-- Modal -->
    <div class="modal" tabindex="-1" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit: @Space?.Name </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" @onclick="(() => showPopup = false)"></button>
                </div>
                @*<div class="modal-body">*@


                    <EditForm Model="_model" OnValidSubmit="ExecuteChange" class="card card-body bg-light">
                        <DataAnnotationsValidator />

                        <div class="form-group row">
                            <label for="email" class="col-md-3 col-form-label">Name:</label>
                            <div class="col-md-9">
                                <InputText id="Name" class="form-control" @bind-Value="_model.Name" />
                                <ValidationMessage For="@(() => _model.Name)" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="latitude" class="col-md-3 col-form-label">Latitude:</label>
                            <div class="col-md-9">
                            <InputText id="Latitude" class="form-control" @bind-Value="_model.Latitude" />
                                <ValidationMessage For="@(() => _model.Latitude)" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="longitude" class="col-md-3 col-form-label">Longitude:</label>
                            <div class="col-md-9">
                                <InputText id="Longitude" class="form-control" @bind-Value="_model.Longitude" />
                                <ValidationMessage For="@(() => _model.Longitude)" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="imageUrl" class="col-md-3 col-form-label">Image Url:</label>
                            <div class="col-md-9">
                                <InputText id="IamgeUrl" class="form-control" @bind-Value="_model.ImageUrl" />
                                <ValidationMessage For="@(() => _model.ImageUrl)" />
                            </div>
                        </div>
                        
                        

                        <div class="row">
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="(() => showPopup = false)">Close</button>
                                <button type="submit" class="btn btn-primary">Save changes</button>
                            </div>
                        </div>

                    </EditForm>
            </div>
        </div>
    </div>
}





@code {
    // Input to component
    [Parameter]
    public SpaceNode? Space { get; set; }

    CreateUpdateSpaceModel _model = new();

    bool showPopup = false;

    private void ShowPopup()
    {
        _model.Name = Space?.Name;
        _model.Latitude = Space?.Metadata?.Latitude.ToString();
        _model.Longitude = Space?.Metadata?.Longitude.ToString();
        _model.ImageUrl = Space?.Metadata?.ImageUrl;

        showPopup = true;
    }


    public async Task ExecuteChange()
    {
        showPopup = false;

        double latitude, longitude;
        double.TryParse(_model.Latitude, out latitude);
        double.TryParse(_model.Longitude, out longitude);

        await d4DataService.EditSpace(_model!.Name!, Space!.Id!, longitude, latitude, _model.ImageUrl);
        Thread.Sleep(900);
        dataAccess.GetAllSpacesPointsSignalsAsync();
    }

    
}
